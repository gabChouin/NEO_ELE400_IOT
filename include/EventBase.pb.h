// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/EventBase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2fEventBase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2fEventBase_2eproto



#include <limits>
#include <string>
#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

#define PROTOBUF_INTERNAL_EXPORT_messages_2fEventBase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2fEventBase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2fEventBase_2eproto;
class EventBase;
class EventBaseDefaultTypeInternal;
extern EventBaseDefaultTypeInternal _EventBase_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EventBase* Arena::CreateMaybeMessage<::EventBase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EventBase :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventBase) */ {
 public:
  EventBase();
  virtual ~EventBase();

  EventBase(const EventBase& from);
  EventBase(EventBase&& from) noexcept
    : EventBase() {
    *this = ::std::move(from);
  }

  inline EventBase& operator=(const EventBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBase& operator=(EventBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventBase* internal_default_instance() {
    return reinterpret_cast<const EventBase*>(
               &_EventBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EventBase* other);
  friend void swap(EventBase& a, EventBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventBase* New() const final {
    return CreateMaybeMessage<EventBase>(nullptr);
  }

  EventBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventBase& from);
  void MergeFrom(const EventBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventBase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2fEventBase_2eproto);
    return ::descriptor_table_messages_2fEventBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string correlationId = 2;
  void clear_correlationid();
  static const int kCorrelationIdFieldNumber = 2;
  const std::string& correlationid() const;
  void set_correlationid(const std::string& value);
  void set_correlationid(std::string&& value);
  void set_correlationid(const char* value);
  void set_correlationid(const char* value, size_t size);
  std::string* mutable_correlationid();
  std::string* release_correlationid();
  void set_allocated_correlationid(std::string* correlationid);

  // string deviceId = 4;
  void clear_deviceid();
  static const int kDeviceIdFieldNumber = 4;
  const std::string& deviceid() const;
  void set_deviceid(const std::string& value);
  void set_deviceid(std::string&& value);
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  std::string* mutable_deviceid();
  std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);

  // string commandId = 6;
  void clear_commandid();
  static const int kCommandIdFieldNumber = 6;
  const std::string& commandid() const;
  void set_commandid(const std::string& value);
  void set_commandid(std::string&& value);
  void set_commandid(const char* value);
  void set_commandid(const char* value, size_t size);
  std::string* mutable_commandid();
  std::string* release_commandid();
  void set_allocated_commandid(std::string* commandid);

  // bytes payload = 7;
  void clear_payload();
  static const int kPayloadFieldNumber = 7;
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // int32 deviceTime = 3;
  void clear_devicetime();
  static const int kDeviceTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 devicetime() const;
  void set_devicetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:EventBase)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commandid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 devicetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2fEventBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventBase

// string id = 1;
inline void EventBase::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventBase::id() const {
  // @@protoc_insertion_point(field_get:EventBase.id)
  return id_.GetNoArena();
}
inline void EventBase::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventBase.id)
}
inline void EventBase::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventBase.id)
}
inline void EventBase::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventBase.id)
}
inline void EventBase::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventBase.id)
}
inline std::string* EventBase::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:EventBase.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventBase::release_id() {
  // @@protoc_insertion_point(field_release:EventBase.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventBase::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:EventBase.id)
}

// string correlationId = 2;
inline void EventBase::clear_correlationid() {
  correlationid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventBase::correlationid() const {
  // @@protoc_insertion_point(field_get:EventBase.correlationId)
  return correlationid_.GetNoArena();
}
inline void EventBase::set_correlationid(const std::string& value) {
  
  correlationid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventBase.correlationId)
}
inline void EventBase::set_correlationid(std::string&& value) {
  
  correlationid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventBase.correlationId)
}
inline void EventBase::set_correlationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  correlationid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventBase.correlationId)
}
inline void EventBase::set_correlationid(const char* value, size_t size) {
  
  correlationid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventBase.correlationId)
}
inline std::string* EventBase::mutable_correlationid() {
  
  // @@protoc_insertion_point(field_mutable:EventBase.correlationId)
  return correlationid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventBase::release_correlationid() {
  // @@protoc_insertion_point(field_release:EventBase.correlationId)
  
  return correlationid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventBase::set_allocated_correlationid(std::string* correlationid) {
  if (correlationid != nullptr) {
    
  } else {
    
  }
  correlationid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), correlationid);
  // @@protoc_insertion_point(field_set_allocated:EventBase.correlationId)
}

// int32 deviceTime = 3;
inline void EventBase::clear_devicetime() {
  devicetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventBase::devicetime() const {
  // @@protoc_insertion_point(field_get:EventBase.deviceTime)
  return devicetime_;
}
inline void EventBase::set_devicetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  devicetime_ = value;
  // @@protoc_insertion_point(field_set:EventBase.deviceTime)
}

// string deviceId = 4;
inline void EventBase::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventBase::deviceid() const {
  // @@protoc_insertion_point(field_get:EventBase.deviceId)
  return deviceid_.GetNoArena();
}
inline void EventBase::set_deviceid(const std::string& value) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventBase.deviceId)
}
inline void EventBase::set_deviceid(std::string&& value) {
  
  deviceid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventBase.deviceId)
}
inline void EventBase::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventBase.deviceId)
}
inline void EventBase::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventBase.deviceId)
}
inline std::string* EventBase::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:EventBase.deviceId)
  return deviceid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventBase::release_deviceid() {
  // @@protoc_insertion_point(field_release:EventBase.deviceId)
  
  return deviceid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventBase::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:EventBase.deviceId)
}

// int32 version = 5;
inline void EventBase::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventBase::version() const {
  // @@protoc_insertion_point(field_get:EventBase.version)
  return version_;
}
inline void EventBase::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:EventBase.version)
}

// string commandId = 6;
inline void EventBase::clear_commandid() {
  commandid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventBase::commandid() const {
  // @@protoc_insertion_point(field_get:EventBase.commandId)
  return commandid_.GetNoArena();
}
inline void EventBase::set_commandid(const std::string& value) {
  
  commandid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventBase.commandId)
}
inline void EventBase::set_commandid(std::string&& value) {
  
  commandid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventBase.commandId)
}
inline void EventBase::set_commandid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commandid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventBase.commandId)
}
inline void EventBase::set_commandid(const char* value, size_t size) {
  
  commandid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventBase.commandId)
}
inline std::string* EventBase::mutable_commandid() {
  
  // @@protoc_insertion_point(field_mutable:EventBase.commandId)
  return commandid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventBase::release_commandid() {
  // @@protoc_insertion_point(field_release:EventBase.commandId)
  
  return commandid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventBase::set_allocated_commandid(std::string* commandid) {
  if (commandid != nullptr) {
    
  } else {
    
  }
  commandid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commandid);
  // @@protoc_insertion_point(field_set_allocated:EventBase.commandId)
}

// bytes payload = 7;
inline void EventBase::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventBase::payload() const {
  // @@protoc_insertion_point(field_get:EventBase.payload)
  return payload_.GetNoArena();
}
inline void EventBase::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EventBase.payload)
}
inline void EventBase::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventBase.payload)
}
inline void EventBase::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventBase.payload)
}
inline void EventBase::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventBase.payload)
}
inline std::string* EventBase::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:EventBase.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventBase::release_payload() {
  // @@protoc_insertion_point(field_release:EventBase.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventBase::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:EventBase.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2fEventBase_2eproto
